#!/usr/bin/env python3
# 
# This script has been copied and modified from randomdrake's
# nasa-apod-desktop repository:
# 
# https://github.com/randomdrake/nasa-apod-desktop
# 
# Written by David Drake and modified by bandang0
# 
# 
# DESCRIPTION
# Downloads the latest image of the dayfrom NASA
# (http://apod.nasa.gov/apod/) to the specified downloads directory.
#
# GLOBALS
# 
# DOWNLOAD_PATH  - where you want the file to be downloaded.
# NASA_APOD_SITE - location of the current picture of the day

import urllib.request, urllib.parse, urllib.error
import urllib.request, urllib.error, urllib.parse
import re
import os
from PIL import Image
from sys import stdout
from sys import exit

DOWNLOAD_PATH = os.path.expanduser('~/Pictures/Wallpapers')
NASA_APOD_SITE = 'http://apod.nasa.gov/apod/'

# Download HTML of the site
def download_site(url):
    print("Downloading contents of the site to find the image name.")
    opener = urllib.request.build_opener()
    req = urllib.request.Request(url)
    try:
        response = opener.open(req)
        reply = response.read()
    except urllib.error.HTTPError as error:
        print("Error downloading " + url + " - " + str(error.code))
        reply = "Error: " + str(error.code)
    return reply

# Finds the image URL and saves it
def get_image(text):
    print("Grabbing the image URL.")
    file_url, filename, file_size = get_image_info('a href', text)
    # If file_url is None, the today's picture might be a video
    if file_url is None:
        return None

    print("Found name of image:", filename)

    save_to = os.path.join(DOWNLOAD_PATH,
            os.path.splitext(filename)[0] + '.png')

    if not os.path.isfile(save_to):
        # If the response body is less than 500 bytes
        # something went wrong
        if file_size < 500:
            print("Response less than 500 bytes, probably an error.")
            print("Attempting to just grab image source.")
            file_url, filename, file_size = get_image_info('img src',
                                                            text)
            # If file_url is None, the today's picture might be a video
            if file_url is None:
                return None
            print("Found name of image:", filename)
            if file_size < 500:
                # Give up
                if SHOW_DEBUG:
                    print("Could not find image to download.")
                exit()

        print("Retrieving image.")
        urllib.request.urlretrieve(file_url, save_to, print_download_status)

        # Adding additional padding to ensure entire line 
        print("\rDone downloading %s." % human_readable_size(file_size))
    else:
        print("File exists, moving on.")

    return save_to

# Resizes the image to the provided dimensions
def resize_image(filename):
    '''Currently not used.'''
    print("Opening local image.")

    image = Image.open(filename)
    current_x, current_y = image.size
    if (current_x, current_y) == (RESOLUTION_X, RESOLUTION_Y):
        print("Images are currently equal in size. No need to scale.")
    else:
        phrase = "Resizing the image from %sx%s to %sx%s."
        print(phrase % ( image.size[0], image.size[1],
                        RESOLUTION_X, RESOLUTION_Y))
        image = image.resize((RESOLUTION_X, RESOLUTION_Y),
                                Image.ANTIALIAS)

        print("Saving the image to", filename, ".")
        fhandle = open(filename, 'wb')
        image.save(fhandle, 'PNG')

def print_download_status(block_count, block_size, total_size):
    written_size = human_readable_size(block_count * block_size)
    total_size = human_readable_size(total_size)

    # Adding space padding at the end so  we overwrite the whole line
    stdout.write("\r%s bytes of %s\t\t" % (written_size, total_size))
    stdout.flush()

def human_readable_size(number_bytes):
    for x in ['bytes', 'KB', 'MB']:
        if number_bytes < 1024.0:
            return "%3.2f%s" % (number_bytes, x)
        number_bytes /= 1024.0

def get_image_info(element, text):
    # Grabs information about the image
    regex = '<' +  element + '="(image.*?)"'
    reg = re.search(regex, text.decode('utf-8'), re.IGNORECASE)
    if reg:
        if 'http' in reg.group(1):
            # Actual URL
            file_url = reg.group(1)
        else:
            # Relative path, handle it
            file_url = NASA_APOD_SITE + reg.group(1)
    else: 
        print("Could not find an image. May be a video today.")
        return None, None, None

    # Create our handle for our remote file
    print("Opening remote URL.")
        
    remote_file = urllib.request.urlopen(file_url)

    filename = os.path.basename(file_url)
    file_size = float(remote_file.headers.get("content-length"))

    return file_url, filename, file_size

if __name__ == '__main__':
    
    # Our program
    print("Starting.")
    # Warn for the download path if it doesn't exist
    if not os.path.exists(DOWNLOAD_PATH):
        print("Specified download path non existent.")
        exit()

    # Grab the HTML contents of the file 
    site_contents = download_site(NASA_APOD_SITE)
    if site_contents == "error":
        print("Could not contact site.")
        exit()

    # Download the image
    filename = get_image(site_contents)

    # If the script was unable todays image,
    # the script exits
    if filename is None:
        print("Today's image could not be downloaded.")
        exit()

    print("Finished!")
